'use Strict'

const {Book} = require('../models/booksModel')

//@desc get books
//@route GET /books
//@access public


//List All Books
const listBooks = async(req,res)=>{
    const books = await Book.findAndCountAll();  

    res.status(200).send({
    error: false,
    message: 'Books are listed',
    count: books?.count,
    result: books?.rows
    })
}

//Create Book
const postBooks = async (req,res)=>{
    
    const {title,isbn,author,year,image,genre} = req.body;
    if(!title || !author || !isbn || !year ||!image ||!genre) {
        res.status(400);
        throw new Error("Please add Required fields!")
    }

    const newBook = await Book.create(req.body);
    res.status(201).send({
        error:false,
        message:"Created",
        newBook
    })
}

//Read Book
    const getBook = async (req,res) =>{
        const book = await Book.findByPk(req.params.id)
        if(!book){
            res.sendStatus(404)
            throw new Error ("No Such a Book")
        }
        console.log(book.rows)
        res.status(200).send({
            error: false,
            result: book
            })
    }

//Update Book
    const updateBook = async (req,res)=>{
    
    const {title,isbn,author,year,image,genre} = req.body;
    if(!title || !author || !isbn || !year ||!image ||!genre) {
        res.status(400);
        throw new Error("Please add Required fields!")
    }

    const book = await Book.findByPk(req.params.id)
    if(!book){
    res.status(404);
    throw new Error('No such a book')
}
    const isUpdated = await Book.update(
        req.body,{
            where:{
                id:req.params.id
            }
        });

        if(!isUpdated[0]){
            res.status(500);
            throw new Error("Book could not been updated")
        }

        const updatedBook = await Book.findByPk(req.params.id)

    res.status(202).send({
        error:false,
        message:"Updated",
        updatedBook
    })
}

//Delete Book
const deleteBook = async (req,res)=>{
    const book = await Book.findByPk(req.params.id)
        if(!book){
             res.status(404);
            throw new Error('No such a book')
        }
    const isDeleted = await Book.destroy({where:{id:req.params.id}});
    if(!isDeleted){
        res.sendStatus(204)  
    } else {
        res.status(500)
        throw new Error('Smt Went wrong')
    }

    console.log(isDeleted)
 
}

module.exports = {
listBooks,
postBooks,
updateBook,
deleteBook,
getBook
}